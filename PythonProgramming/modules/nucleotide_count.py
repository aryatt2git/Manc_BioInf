from itertools import product

def nucleotide_count(sequence, number):
    '''
    This function counts the number of single nucleotides, dinucleotides and trinucleotides in a sequence. The user
    determines the number of nucleotides in each combination and the product function from the itertools module
    generates every nucleotide combination.

    :params: sequence: a string of any number of nucleotides [A, T, C, G] in any order.
                       E.g. 'aggagtaagcccttgcaactggaaatacacccattg'

             number: the number of nucleotides in the combinations that derive from 'A', 'C', 'G' and 'T'.

    :return: a dictionary of the nucleotide combinations as the keys and their frequencies within the sequences
             as their values.
             E.g. {A: 12, C: 9, G: 8. T: 7}

    :command: sequence = 'aggagtaagcccttgcaactggaaatacacccattg'
              six_frame_trans(sequence, 3)
    '''

    # A list of the different types of nucleotides.
    nucleotides = ['A', 'C', 'G', 'T']

    # A shortened for loop that creates a list of every combination of nucleotides in a length of a string, defined by the user.
    combinations = [''.join(combination) for combination in product(nucleotides, repeat = number)]

    # An empty dictionary to store the combinations generated by the product function and the frequency that they occur in the input sequence.
    nucleotide_dict = {}

    # A loop to add each combination to the dictionary with a starting frequency of 0.
    for comb in combinations:

        nucleotide_dict[comb] = 0

    # The loop iterates through each multiple of the combination length up to the full length of the input sequence.
    for nn in range(0, len(sequence)+number, number):

        # The multiples are used to split the input sequence into composite chunks, the same length as the combinations.
        # The chunks are also converted into uppercase.
        xx = sequence[nn - number:nn].upper()

        # This conditional increases the frequency of a key (a combination) in the dictionary by 1 if it matches a chunk from the input string.
        if xx in nucleotide_dict.keys():

            nucleotide_dict[xx] = nucleotide_dict[xx] + 1

    # The loop iterates through each item in the dictionary.
    for item in nucleotide_dict:

        # The conditional prints the item to screen if its frequency is > 0.
        if nucleotide_dict[item] > 0:
            print(f'{item}: {nucleotide_dict[item]}')

    # The dictionary is returned.
    return nucleotide_dict